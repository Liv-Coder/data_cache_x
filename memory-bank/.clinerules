# DataCacheX Project Rules

## Code Conventions

1. **File Organization**
   - Core functionality in `/lib/core/`
   - Adapters in `/lib/adapters/` with subdirectories for each adapter type
   - Models in `/lib/models/`
   - Serializers in `/lib/serializers/`
   - Utilities in `/lib/utils/`

2. **Naming Conventions**
   - Class names: PascalCase (e.g., `DataCacheX`, `HiveAdapter`)
   - Methods and variables: camelCase (e.g., `putValue`, `cacheItem`)
   - Constants: UPPER_SNAKE_CASE (e.g., `DEFAULT_EXPIRY_DURATION`)
   - Private members: prefixed with underscore (e.g., `_adapter`, `_initialize()`)

3. **Documentation**
   - All public APIs must have dartdoc comments
   - Examples should be included for complex methods
   - Parameter descriptions required for all public methods
   - Use `///` for documentation comments

4. **Error Handling**
   - Use specific exception types from `exception.dart`
   - Include meaningful error messages
   - Wrap external library errors in our custom exceptions

## Implementation Patterns

1. **Adapter Implementation**
   - All adapters must implement the `CacheAdapter` interface
   - Adapters should handle serialization internally
   - Adapters must properly handle expiry logic
   - Adapters should have appropriate cleanup mechanisms

2. **Type Safety**
   - Use generics consistently (e.g., `put<T>`, `get<T>`)
   - Include runtime type checks where appropriate
   - Register type adapters for Hive storage
   - Use appropriate serialization for complex types

3. **Asynchronous Operations**
   - All storage operations should be asynchronous
   - Use `Future` for all I/O operations
   - Properly handle and propagate errors in async code
   - Avoid blocking the main thread

4. **Testing Approach**
   - Unit tests for all public APIs
   - Mocked adapters for testing core functionality
   - Integration tests for actual adapter implementations
   - Performance tests to benchmark operations

## Development Workflow

1. **Feature Development**
   - Create feature branch from main
   - Implement tests first (TDD approach)
   - Update documentation alongside code
   - Create pull request with detailed description

2. **Version Management**
   - Semantic versioning (MAJOR.MINOR.PATCH)
   - Update CHANGELOG.md with each version
   - Tag releases in git
   - Include migration notes for breaking changes

3. **Documentation Updates**
   - README.md for general usage
   - API documentation via dartdoc
   - Example projects in `/example` directory
   - Update documentation when API changes

## Performance Considerations

1. **Caching Strategy**
   - Use appropriate expiry times for different data types
   - Consider memory impact for large caches
   - Use background cleanup judiciously
   - Optimize serialization for frequent operations

2. **Platform Specifics**
   - Web: Consider storage limitations
   - Mobile: Be mindful of battery and storage impact
   - Desktop: Optimize for larger datasets

## Security Practices

1. **Data Protection**
   - Use encryption for sensitive data
   - Secure management of encryption keys
   - Clear sensitive data from memory when no longer needed
   - Validate data integrity during retrieval

2. **Input Validation**
   - Validate keys and values before storage
   - Check for invalid expiry times
   - Verify data types during retrieval 